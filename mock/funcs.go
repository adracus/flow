// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/adracus/flow/mock (interfaces: Func,StringFunc,IntFunc,BoolFunc,SubmitFunc)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFunc is a mock of Func interface.
type MockFunc struct {
	ctrl     *gomock.Controller
	recorder *MockFuncMockRecorder
}

// MockFuncMockRecorder is the mock recorder for MockFunc.
type MockFuncMockRecorder struct {
	mock *MockFunc
}

// NewMockFunc creates a new mock instance.
func NewMockFunc(ctrl *gomock.Controller) *MockFunc {
	mock := &MockFunc{ctrl: ctrl}
	mock.recorder = &MockFuncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFunc) EXPECT() *MockFuncMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockFunc) Call(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Call indicates an expected call of Call.
func (mr *MockFuncMockRecorder) Call(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockFunc)(nil).Call), arg0)
}

// MockStringFunc is a mock of StringFunc interface.
type MockStringFunc struct {
	ctrl     *gomock.Controller
	recorder *MockStringFuncMockRecorder
}

// MockStringFuncMockRecorder is the mock recorder for MockStringFunc.
type MockStringFuncMockRecorder struct {
	mock *MockStringFunc
}

// NewMockStringFunc creates a new mock instance.
func NewMockStringFunc(ctrl *gomock.Controller) *MockStringFunc {
	mock := &MockStringFunc{ctrl: ctrl}
	mock.recorder = &MockStringFuncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStringFunc) EXPECT() *MockStringFuncMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockStringFunc) Call(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockStringFuncMockRecorder) Call(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockStringFunc)(nil).Call), arg0)
}

// MockIntFunc is a mock of IntFunc interface.
type MockIntFunc struct {
	ctrl     *gomock.Controller
	recorder *MockIntFuncMockRecorder
}

// MockIntFuncMockRecorder is the mock recorder for MockIntFunc.
type MockIntFuncMockRecorder struct {
	mock *MockIntFunc
}

// NewMockIntFunc creates a new mock instance.
func NewMockIntFunc(ctrl *gomock.Controller) *MockIntFunc {
	mock := &MockIntFunc{ctrl: ctrl}
	mock.recorder = &MockIntFuncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIntFunc) EXPECT() *MockIntFuncMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockIntFunc) Call(arg0 context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockIntFuncMockRecorder) Call(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockIntFunc)(nil).Call), arg0)
}

// MockBoolFunc is a mock of BoolFunc interface.
type MockBoolFunc struct {
	ctrl     *gomock.Controller
	recorder *MockBoolFuncMockRecorder
}

// MockBoolFuncMockRecorder is the mock recorder for MockBoolFunc.
type MockBoolFuncMockRecorder struct {
	mock *MockBoolFunc
}

// NewMockBoolFunc creates a new mock instance.
func NewMockBoolFunc(ctrl *gomock.Controller) *MockBoolFunc {
	mock := &MockBoolFunc{ctrl: ctrl}
	mock.recorder = &MockBoolFuncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBoolFunc) EXPECT() *MockBoolFuncMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockBoolFunc) Call(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockBoolFuncMockRecorder) Call(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockBoolFunc)(nil).Call), arg0)
}

// MockSubmitFunc is a mock of SubmitFunc interface.
type MockSubmitFunc struct {
	ctrl     *gomock.Controller
	recorder *MockSubmitFuncMockRecorder
}

// MockSubmitFuncMockRecorder is the mock recorder for MockSubmitFunc.
type MockSubmitFuncMockRecorder struct {
	mock *MockSubmitFunc
}

// NewMockSubmitFunc creates a new mock instance.
func NewMockSubmitFunc(ctrl *gomock.Controller) *MockSubmitFunc {
	mock := &MockSubmitFunc{ctrl: ctrl}
	mock.recorder = &MockSubmitFuncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubmitFunc) EXPECT() *MockSubmitFuncMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockSubmitFunc) Call() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Call")
}

// Call indicates an expected call of Call.
func (mr *MockSubmitFuncMockRecorder) Call() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockSubmitFunc)(nil).Call))
}
